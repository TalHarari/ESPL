Task 1
In this task, you will make your shell work like a real command interpreter (tasks 1a and 1b), and then add various features.
When executed with the "-d" flag, your shell will also print the debug output to stderr (if "-d" is not given, you should not print anything to stderr).
Task 1a
Building up on your code from task 0, we would like our shell to remain active after invoking another program. The fork system call (see man) is the key: it 'duplicates' our process, creating an almost identical copy (child) of the issuing (parent) process. For the parent process, the call returns the process ID of the newly-born child, whereas for the child process - the value 0 is returned.

You will need to print to stderr the following debug information in your task:

PID
Executing command
Notes:

Use fork to maintain the shell alive (recall mandatory lecture 2) by forking before execvp, while handling the return code appropriately (again as stated in the lecture). (Although if fork( ) fails you are in real trouble anyway (e.g. fork bomb!), so you might as well ignore this case).
If execvp fails, use _exit() (see man) to terminate the process. (Why?)
Task 1b
Add a shell command "cd" that allows the user to change the current working directory. Essentially, you need to emulate a simplified version of the "cd" internal shell command: use chdir for that purpose (see man). No need to implement anything beyond transferring the argument of "cd" to "chdir". Print appropriate error message to stderr if the cd operation fails.
Task 1c
Until now we've executed commands without waiting for the process to terminate. You will now use the waitpid call (see man), in order to implement the wait. Pay attention to the blocking field in cmdLine. It is set to 0 if a "&" symbol is added at the end of the line, 1 otherwise.

Invoke waitpid when you're required, and only when you're required. For example: "cat myshell.c &" will not wait for the cat process to end (cat in this case runs in the background), but "cat myshell.c" will (cat runs in the foreground).

Task 2 - Signals
Every program you run using the shell runs as a process. You can get a list of the running processes using the ps program (see: man 1 ps and man 2 ps). In this task we are going to implement shell commands to help manage the processes using signals. Implement and test the following commands:
stop <process id> - Send a SIGSTOP signal to a process to make it "sleep".
wake <process id> - Wake up a sleeping (stopped) process (SIGCONT).
term <process id> - Terminate a running/sleeping process (SIGINT).

In all cases, use the kill( ) system call wrapper, see man 2 kill, to send the relevant signal to the given process id.
Test your shell using your looper code from task0b in the following scenario:


#> ./looper&
#> ./looper&
#> ./looper&
#> ps
PID TTY          TIME CMD
17998 pts/11   00:00:00 bash
24207 pts/11   00:00:00 task2
24246 pts/11   00:00:00 looper
24279 pts/11   00:00:00 looper
24326 pts/11   00:00:00 looper
24336 pts/11   00:00:00 ps
#> term 24326
#> ps
PID TTY          TIME CMD
17998 pts/11   00:00:00 bash
24207 pts/11   00:00:00 task2
24246 pts/11   00:00:00 looper
24279 pts/11   00:00:00 looper
24326 pts/11   00:00:00 looper <defunct>
24336 pts/11   00:00:00 ps

Task 3: Redirection
Add standard input/output redirection capabilities to your shell (e.g., 
"cat < in.txt > out.txt"). Guidelines on I/O redirection can be found in the reading material.

Notes:

The inputRedirect and outputRedirect fields in cmdLine do the parsing work for you. They hold the redirection file names if exist, NULL otherwise.
Remember to redirect input/output only in the child process. We do not want to redirect the I/O of the shell itself (parent process).

Now that you finished tasks 1, 2, 3, save your code aside. You will need it for submission and for Lab C.
Task 4: Exercise in Pipe System Call
Recall from the lecture that a pipe is a pair of input stream/output stream, such that one stream feeds the other stream directly. All data that is written to one side (the "write end") can be read from the other side (the "read end"). This sort of feed becomes pretty useful when one wishes to communicate between processes, such as when implementing a shell pipe as described in the lecture. This task is to help you execise the basic pipe mechanism, towards achieving a shell pipe implementation (part of what you will be doing in lab C).
